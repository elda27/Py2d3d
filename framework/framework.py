import numpy as np
from abc import abstractmethod, ABCMeta
from contextlib import contextmanager


class Framework:
    """ The base class of framework for pre and post process
    registration process.

    Almost user should implement 'generate_pre', 'generate_post',
    'update_pre' and 'update_post'.

    If implementation of 'generate' and 'update' methods,
    these are context method so derived class uses 'yield' 
    insted of 'return'.

    Typical usage:
        >>> framework = DerivedFramework()
        >>> worker = framework.generate(any_optimizer) 
        # A worker is generator object
        >>> any_optimizer = next(worker) # pre-process
        >>> <body>
        >>> result = worker.send(generated_population) # resume post-process
        >>> return result
    """

    def generate(self, optimizer):
        """ A pre and post process to generate optimizing variables.
        The optimizer class gives population of optimizing variables.

        Args:
            optimizer: Optimizer object.
        """
        population = yield self.generate_pre(optimizer)
        population = self.generate_post(population)
        yield population

    def update(self, metric):
        """A pre and post process to update optimizing variables.
        The optimizer class gives metric which is a metric evaluated
        current population.

        Args:
            optimizer : [description]
        """

        optimizer = yield self.update_pre(metric)
        optimizer = self.update_post(optimizer)
        yield optimizer

    def generate_pre(self, optimizer):
        """A pre-processing in the generate function.

        Args:
            optimizer : Optimizer object

        Returns:
            Optimizer object which is same object to argument object
            in this function.
        """

        return optimizer

    def generate_post(self, population):
        """A post-processing in the generate function.

        Args:
            population (np.ndarray): Population which is generated by optimizer object.

        Returns:
            Post-processed population object.
        """
        return population

    def update_pre(self, metric):
        """A pre-processing in the update function.

        Args:
            population (np.ndarray): metric which will use to update 
                the optimizer state.

        Returns:
            Optimizer object which is same object to argument object
            in this function.
        """

        return metric

    def update_post(self, optimizer):
        """A post-processing in the update function.

        Args:
            optimizer : Optimizer object

        Returns:
            Post-processed metrics.
        """
        return optimizer
